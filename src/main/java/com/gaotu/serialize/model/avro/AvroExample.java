/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.gaotu.serialize.model.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class AvroExample extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8321700399627100846L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroExample\",\"namespace\":\"com.gaotu.serialize.model.avro\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"age\",\"type\":[\"int\",\"null\"]},{\"name\":\"sex\",\"type\":[\"string\",\"null\"]},{\"name\":\"money\",\"type\":[\"double\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroExample> ENCODER =
      new BinaryMessageEncoder<AvroExample>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroExample> DECODER =
      new BinaryMessageDecoder<AvroExample>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroExample> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroExample> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroExample> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroExample>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroExample to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroExample from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroExample instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroExample fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private CharSequence name;
   private Integer age;
   private CharSequence sex;
   private Double money;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroExample() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param age The new value for age
   * @param sex The new value for sex
   * @param money The new value for money
   */
  public AvroExample(CharSequence name, Integer age, CharSequence sex, Double money) {
    this.name = name;
    this.age = age;
    this.sex = sex;
    this.money = money;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return age;
    case 2: return sex;
    case 3: return money;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: name = (CharSequence)value$; break;
    case 1: age = (Integer)value$; break;
    case 2: sex = (CharSequence)value$; break;
    case 3: money = (Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'age' field.
   * @return The value of the 'age' field.
   */
  public Integer getAge() {
    return age;
  }


  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(Integer value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'sex' field.
   * @return The value of the 'sex' field.
   */
  public CharSequence getSex() {
    return sex;
  }


  /**
   * Sets the value of the 'sex' field.
   * @param value the value to set.
   */
  public void setSex(CharSequence value) {
    this.sex = value;
  }

  /**
   * Gets the value of the 'money' field.
   * @return The value of the 'money' field.
   */
  public Double getMoney() {
    return money;
  }


  /**
   * Sets the value of the 'money' field.
   * @param value the value to set.
   */
  public void setMoney(Double value) {
    this.money = value;
  }

  /**
   * Creates a new AvroExample RecordBuilder.
   * @return A new AvroExample RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new AvroExample RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroExample RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new AvroExample RecordBuilder by copying an existing AvroExample instance.
   * @param other The existing instance to copy.
   * @return A new AvroExample RecordBuilder
   */
  public static Builder newBuilder(AvroExample other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroExample instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroExample>
    implements org.apache.avro.data.RecordBuilder<AvroExample> {

    private CharSequence name;
    private Integer age;
    private CharSequence sex;
    private Double money;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.sex)) {
        this.sex = data().deepCopy(fields()[2].schema(), other.sex);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.money)) {
        this.money = data().deepCopy(fields()[3].schema(), other.money);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing AvroExample instance
     * @param other The existing instance to copy.
     */
    private Builder(AvroExample other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sex)) {
        this.sex = data().deepCopy(fields()[2].schema(), other.sex);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.money)) {
        this.money = data().deepCopy(fields()[3].schema(), other.money);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public Builder setName(CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'age' field.
      * @return The value.
      */
    public Integer getAge() {
      return age;
    }


    /**
      * Sets the value of the 'age' field.
      * @param value The value of 'age'.
      * @return This builder.
      */
    public Builder setAge(Integer value) {
      validate(fields()[1], value);
      this.age = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'age' field has been set.
      * @return True if the 'age' field has been set, false otherwise.
      */
    public boolean hasAge() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'age' field.
      * @return This builder.
      */
    public Builder clearAge() {
      age = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sex' field.
      * @return The value.
      */
    public CharSequence getSex() {
      return sex;
    }


    /**
      * Sets the value of the 'sex' field.
      * @param value The value of 'sex'.
      * @return This builder.
      */
    public Builder setSex(CharSequence value) {
      validate(fields()[2], value);
      this.sex = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sex' field has been set.
      * @return True if the 'sex' field has been set, false otherwise.
      */
    public boolean hasSex() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sex' field.
      * @return This builder.
      */
    public Builder clearSex() {
      sex = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'money' field.
      * @return The value.
      */
    public Double getMoney() {
      return money;
    }


    /**
      * Sets the value of the 'money' field.
      * @param value The value of 'money'.
      * @return This builder.
      */
    public Builder setMoney(Double value) {
      validate(fields()[3], value);
      this.money = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'money' field has been set.
      * @return True if the 'money' field has been set, false otherwise.
      */
    public boolean hasMoney() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'money' field.
      * @return This builder.
      */
    public Builder clearMoney() {
      money = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroExample build() {
      try {
        AvroExample record = new AvroExample();
        record.name = fieldSetFlags()[0] ? this.name : (CharSequence) defaultValue(fields()[0]);
        record.age = fieldSetFlags()[1] ? this.age : (Integer) defaultValue(fields()[1]);
        record.sex = fieldSetFlags()[2] ? this.sex : (CharSequence) defaultValue(fields()[2]);
        record.money = fieldSetFlags()[3] ? this.money : (Double) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroExample>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroExample>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroExample>
    READER$ = (org.apache.avro.io.DatumReader<AvroExample>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  protected boolean hasCustomCoders() { return true; }

  public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.name);

    if (this.age == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeInt(this.age);
    }

    if (this.sex == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.sex);
    }

    if (this.money == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeDouble(this.money);
    }

  }

  public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrder();
    if (fieldOrder == null) {
      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      if (in.readIndex() != 0) {
        in.readNull();
        this.age = null;
      } else {
        this.age = in.readInt();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.sex = null;
      } else {
        this.sex = in.readString(this.sex instanceof Utf8 ? (Utf8)this.sex : null);
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.money = null;
      } else {
        this.money = in.readDouble();
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 1:
          if (in.readIndex() != 0) {
            in.readNull();
            this.age = null;
          } else {
            this.age = in.readInt();
          }
          break;

        case 2:
          if (in.readIndex() != 0) {
            in.readNull();
            this.sex = null;
          } else {
            this.sex = in.readString(this.sex instanceof Utf8 ? (Utf8)this.sex : null);
          }
          break;

        case 3:
          if (in.readIndex() != 0) {
            in.readNull();
            this.money = null;
          } else {
            this.money = in.readDouble();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










